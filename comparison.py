from tsp_solver import solve_tsp
from prim_solver import solve_prim
from kruskal_solver import solve_kruskal
from routing import get_realistic_route

def compare_algorithms(locations):
    """
    Compare the total distances of routes generated by TSP, Prim's, and Kruskal's algorithms.
    
    Args:
        locations: List of location dictionaries with 'lat', 'lng'
        
    Returns:
        Dictionary with comparison results
    """
    # Get routes for each algorithm
    tsp_route = solve_tsp(locations)
    prim_route = solve_prim(locations)
    kruskal_route = solve_kruskal(locations)
    
    # Calculate total distance for each algorithm
    results = {}
    
    # Calculate TSP distance
    tsp_distance = calculate_route_distance(locations, tsp_route)
    results["tsp"] = {
        "distance": tsp_distance,
        "route": [locations[i] for i in tsp_route]
    }
    
    # Calculate Prim's distance
    prim_distance = calculate_route_distance(locations, prim_route)
    results["prim"] = {
        "distance": prim_distance,
        "route": [locations[i] for i in prim_route]
    }
    
    # Calculate Kruskal's distance
    kruskal_distance = calculate_route_distance(locations, kruskal_route)
    results["kruskal"] = {
        "distance": kruskal_distance,
        "route": [locations[i] for i in kruskal_route]
    }
    
    return results

def calculate_route_distance(locations, route_order):
    """
    Calculate the total distance of a route.
    
    Args:
        locations: List of location dictionaries with 'lat', 'lng'
        route_order: List of indices representing the visit order
        
    Returns:
        Total distance in meters
    """
    total_distance = 0
    
    for i in range(len(route_order) - 1):
        from_point = locations[route_order[i]]
        to_point = locations[route_order[i + 1]]
        
        route_data = get_realistic_route(from_point, to_point)
        total_distance += route_data["distance"]
    
    return total_distance